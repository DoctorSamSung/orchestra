/*
 * Interop server message definitions.
 *
 * The Interop Proxy service translates the JSON repsonses from the
 * interop server into these messages (and vise-versa).
 *
 * Note that all units will be in meters, meters/second, seconds,
 * degrees, etc. unless otherwise noted.
 *
 * Time is in seconds from 1970 epoch.
 *
 * Lat, lon, and yaw are in the range [0, 360).
 */

syntax = "proto3";

package interop;

// Used by other messages.
message Position {
    float lat = 1;
    float lon = 1;
}

// Used by other messages.
message AerialPosition {
    float lat = 1;
    float lon = 2;
    float alt_msl = 3;
}

// Mission on the interop server.
// 
// Note the lack of an active field, as all missions passed into the
// stack will be assumed to be active.
message Mission {
    message FlyZone {
        float alt_msl_max = 1;
        float alt_msl_min = 2;
        repeated Position boundary = 3;
    }

    double time = 1;
    // If there even is an active mission or not.
    bool current_mission = 2;
    Position air_drop_pos = 3;
    repeated FlyZone fly_zones = 4;
    Position home_pos = 5;
    repeated AerialPosition waypoints = 6;
    Position off_axis_pos = 7;
    Position emergent_pos = 8;
    repeated AerialPosition search_area = 9;
}

// Lists the stationary and moving obstacles.
message Obstacles {
    message StationaryObstacle {
        AerialPosition pos = 1;
        float height = 2;
        float radius = 3;
    }

    message MovingObstacle {
        Position pos = 1;
        float radius = 2;
    }

    double time = 1;
    repeated StationaryObstacle stationary = 2;
    repeated MovingObstacle moving = 3;
}

// Telemetry to upload to the server.
message InteropTelem {
    double time = 1;
    AerialPosition pos = 2;
    float yaw = 3;
}

// Target on the interop server, also includes the image.
message Odlc {
    enum Type {
        STANDARD = 0;
        OFF_AXIS = 1;
        EMERGENT = 2;
    }

    enum Orientation {
        NONE = 0;
        N = 1;
        NE = 2;
        E = 3;
        SE = 4;
        S = 5;
        SW = 6;
        W = 7;
        NW = 8;
    }

    enum Shape {
        NONE = 0;
        CIRCLE = 1;
        SEMICIRCLE = 2;
        QUARTER_CIRCLE = 3;
        TRIANGLE = 4;
        SQUARE = 5;
        RECTANGLE = 6;
        TRAPEZOID = 7;
        PENTAGON = 8;
        HEXAGON = 9;
        HEPTAGON = 10;
        OCTAGON = 11;
        STAR = 12;
        CROSS = 13;
    }

    enum Color {
        NONE = 0;
        WHITE = 1;
        BLACK = 2;
        GRAY = 3;
        RED = 4;
        BLUE = 5;
        GREEN = 6;
        YELLOW = 7;
        PURPLE = 8;
        BROWN = 9;
        ORANGE = 10;
    }

    double time = 1;
    // id number provided by the server.
    uint32 id = 2;
    Type type = 3;
    Position pos = 4;
    Orientation orientation = 5;
    Shape shape = 6;
    Color background_color = 7;
    string alphanumeric = 8;
    Color alphanumeric_color = 9;
    string description = 10;
    bool autonomous = 11;
    // Must be a png if provided.
    bytes image = 12;
    // Should only be used with JSON in testing (since JSON needs to
    // be UTF-8).
    string image_base64 = 13;
}

// Message for listing all the odlcs.
message OdlcList {
    double time = 1;
    repeated Odlc list = 2;
}

// Message containing text sent back from the server after a request.
message InteropMessage {
    double time = 1;
    string text = 2;
}
